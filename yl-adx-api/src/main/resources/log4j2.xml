<?xml version="1.0" encoding="UTF-8"?>
<!-- status : 指定log4j本身的打印日志的级别.ALL< Trace < DEBUG < INFO < WARN < ERROR < FATAL < OFF。
	 monitorInterval : 用于指定log4j自动重新配置的监测间隔时间，单位是s,最小是5s. -->
<Configuration status="INFO" monitorInterval="30">

    <Properties>
        <!-- 如果sys:log.home未定义或为空，则定义LOG_HOME的默认值 -->
        <!-- 配置日志文件输出目录 ${sys:log.home} -->
        <Property name="LOG_HOME">${sys:log.home:-/data/log/jetty/adx-api/}</Property>
        <!-- <Property name="LOG_HOME">/data/log/jetty/adx-api/</Property> -->
        <Property name="LOG_FILE_PREFIX">adx-api</Property>
        <property name="INFO_LOG_FILE_NAME">${LOG_HOME}/${LOG_FILE_PREFIX}-info.log</property>
        <property name="ERROR_LOG_FILE_NAME">${LOG_HOME}/${LOG_FILE_PREFIX}-error.log</property>
        <property name="PATTERN">%d{yyyy-MM-dd HH:mm:ss.SSS} %-5p [%t-%L] [%c] - %m%n</property>
    </Properties>
    <Appenders>
        <!-- 控制台输出 -->
        <Console name="Console" target="SYSTEM_OUT">
            <!-- 控制台只输出level及以上级别的信息(onMatch),其他的直接拒绝(onMismatch) -->
            <!-- <ThresholdFilter level="trace" onMatch="ACCEPT" onMismatch="DENY" />-->
            <!-- 过滤特定级别的日志消息，在log4j2中，LevelRangeFilter的minLevel，maxLevel的配置是和log4j 1.x相反的。
                 minLevel代表最高级别，maxLevel代表最低级别 -->
            <Filters>
                <LevelRangeFilter minLevel="FATAL" maxLevel="TRACE" onMatch="ACCEPT" onMismatch="DENY" />
            </Filters>
            <!-- 输出日志的格式 -->
            <PatternLayout pattern="%d{yyyy-MM-dd HH:mm:ss.SSS} %highlight{%-5p} [%t-%L] %cyan{[%c]} - %m%n" />
        </Console>
        <RollingRandomAccessFile name="infoLog" fileName="${INFO_LOG_FILE_NAME}"
                                 filePattern="${LOG_HOME}/$${date:yyyy-MM}/${LOG_FILE_PREFIX}-info-%d{yyyy-MM-dd}-%i.log" immediateFlush="false" >

            <!-- <ThresholdFilter level="INFO" onMatch="ACCEPT" onMismatch="DENY"/> -->
            <!-- 过滤特定级别的日志消息，在log4j2中，LevelRangeFilter的minLevel，maxLevel的配置是和log4j 1.x相反的。
                 minLevel代表最高级别，maxLevel代表最低级别 -->
            <Filters>
			    <LevelRangeFilter minLevel="WARN" maxLevel="INFO" onMatch="ACCEPT" onMismatch="DENY" />
			</Filters>
            <PatternLayout>
                <Charset>UTF-8</Charset>
                <Pattern>${PATTERN}</Pattern>
            </PatternLayout>
            <Policies>
                <TimeBasedTriggeringPolicy interval="1" modulate="true" />
                <SizeBasedTriggeringPolicy size="1024MB" />
                <!-- <SizeBasedTriggeringPolicy size="2KB" />  -->
                <!-- <SizeBasedTriggeringPolicy size="10MB" /> -->
            </Policies>
            <DefaultRolloverStrategy max="100" />
        </RollingRandomAccessFile>

        <RollingRandomAccessFile name="errorLog" fileName="${ERROR_LOG_FILE_NAME}"
                                 filePattern="${LOG_HOME}/$${date:yyyy-MM}/${LOG_FILE_PREFIX}-error-%d{yyyy-MM-dd}-%i.log" immediateFlush="false" >
            
            <!-- <ThresholdFilter level="ERROR" onMatch="ACCEPT" onMismatch="DENY"/>-->
            <!-- 过滤特定级别的日志消息，在log4j2中，LevelRangeFilter的minLevel，maxLevel的配置是和log4j 1.x相反的。
                 minLevel代表最高级别，maxLevel代表最低级别 -->
            <Filters>
                <LevelRangeFilter minLevel="FATAL" maxLevel="ERROR" onMatch="ACCEPT" onMismatch="DENY" />
            </Filters> 
            <PatternLayout>
                <Charset>UTF-8</Charset>
                <Pattern>${PATTERN}</Pattern>
            </PatternLayout>
            <Policies>
                <TimeBasedTriggeringPolicy interval="1" modulate="true" />
                <SizeBasedTriggeringPolicy size="1024MB" />
            </Policies>
            <DefaultRolloverStrategy max="10" />
        </RollingRandomAccessFile>
    </Appenders>

    <!-- 异步和非异步混合输出模式 -->
    <Loggers>

        <!--同步异步混合使用<AsyncLogger> or <asyncRoot> 配置元素后就不需要配置 "Log4jContextSelector" 系统属性。
             additivity=false 表示在该logger中输出的日志不会再延伸到父层logger。这里如果改为true，则会延伸到Root Logger，遵循Root Logger的配置也输出一次
             name="com.example.pkgname OR com.example.pkgname.ClassName"
        -->
        <!-- <AsyncLogger name="com.game.core.framework.websocket.handler.SpringWebSocketHandler" level="INFO" includeLocation="true" additivity="false">
            <appender-ref ref="infoLog" />
        </AsyncLogger> -->

        <root level="info" includeLocation="true">
            <appender-ref ref="errorLog" />
            <appender-ref ref="infoLog" />
            <appender-ref ref="Console"/>
        </root>

        <!--过滤掉spring和mybatis的一些无用的DEBUG信息-->
        <logger name="org.springframework" level="INFO"/>
        <logger name="org.mybatis" level="INFO"/>

        <!-- 第三方日志系统 -->
        <logger name="org.springframework.core" level="INFO" />
        <logger name="org.springframework.beans" level="INFO" />
        <logger name="org.springframework.context" level="INFO" />
        <logger name="org.springframework.web" level="INFO" />
        <logger name="org.apache.http" level="WARN" />
        <logger name="com.meizu.kiev" level="ERROR" />
        
    </Loggers>

</Configuration>